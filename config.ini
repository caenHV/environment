[monitor]
; The monitor docker container connection info
protocol = tcp
host = monitor
port = 5561
address = ${protocol}://*:${port}

dbpath = ./monitor.db
; ODB reads info from these files (paths inside docker containers are set).
param_file_path = /odb/data/last_measurement.json
status_file_path = /odb/data/current_status.json
; At the dq11 machine paths are:
; param_file_path = /home/cmd3daq/caendc/data/last_measurement.json
; status_file_path = /home/cmd3daq/caendc/data/current_status.json

; Level of information to log
loglevel = info
; Path inside the docker container to the log file
; At the machine it is ${repo}/store/monitor.log
logfile=/store/monitor.log

[device]
; The device docker container connection info
protocol = tcp
host = devback
port = 5570
address = ${protocol}://*:${port}

; Path inside the docker container to the log file
; At the machine it is ${repo}/store/monitor.log
map_config = /store/channels_map_config.json
; Time in seconds
refersh_time = 1
; Use the mock of the CAEN board? 
fake_board = false
; Base speed of voltage ramping up/down, V/s 
ramp_up_speed = 10
ramp_down_speed = 100
; Determines whether high res (is_high_Imon_range = false <=> 0.005 muA and max I = 300 muA) 
; or low res (is_high_Imon_range = true <=> 0.05 muA and max I = 3000 muA) current monitor is used.
; Follows CAEN naming convention.
is_high_Imon_range = true

; Level of information to log
loglevel = info
; Path inside the docker container to the log file
; At the machine it is ${repo}/store/device.log
logfile = /store/device.log

[check]
;Main network parameters for the service itself
protocol = tcp
host = syscheck
port = 5571
address = ${protocol}://*:${port}

;Addresses for the service friends
device_backend = ${device:protocol}://${device:host}:${device:port}
monitor = ${monitor:protocol}://${monitor:host}:${monitor:port}
; If you want to to read out interlock info from the SND postgressDB, use this uri
;interlock_db_uri = postgresql://kmd:kmd@sndas0.inp.nsk.su:5432/vepp2k
; If you want to read out interlock info from the SND socket, use this uri
interlock_db_uri = tcp://sndas0.inp.nsk.su:20041/CMD/Interlock

; Level of information to log
loglevel = info
; Path inside the docker container to the log file
; At the machine it is ${repo}/store/check.log
logfile = /store/check.log

[check.loader]
;Moves data from devback to monitor
enable = true
; Period of the info load out to the monitor, s 
repeat_every = 1

[check.health]
;Health parameters control
enable = true
; Period of the health checkup, s 
repeat_every = 1
; Path inside the docker container to the health_check config file
; At the machine it is ${repo}/store/health_check_config.json
health_check_config_path = /store/health_check_config.json
; Minimum voltage multiplier to send ACK to the MChS
low_voltage_mlt = 0.5
; Window in which emergency downs are considered consecutive
allowed_down_window = 120
; Number of allowed consecutive emergency downs
n_consecutive_downs = 4
; Sets auto restart of the autopilot after emergency down 
auto_restart_autopilot = true
; Time before restart of the autopilot after last emergency down, s 
auto_restart_after = 65


[check.interlock]
;Interlock settings (reads interlock to have actual values for MChS)
enable = true
; Period of the interlock checks, s 
repeat_every = 1

[check.autopilot]
;Autopilot settings
enable = false
; If interlock is up, voltage_multiplier = target_voltage * voltage_modifier
voltage_modifier = 0.4
; As a multiplier of a base voltage (check out map_config)
target_voltage = 1

[check.autopilot.relax]
;Relax settings
enable = ${check.autopilot:enable}
repeat_every = 15
voltage_modifier = ${check.autopilot:voltage_modifier}
target_voltage = ${check.autopilot:target_voltage}

[check.autopilot.reducer]
;Scheduled reducer settings
enable = ${check.autopilot:enable}
; Every repeat_every (s) voltage is temporarily reduced for reducing_period (s) 
repeat_every = 1800
reducing_period = 60
voltage_modifier = ${check.autopilot:voltage_modifier}
target_voltage = ${check.autopilot:target_voltage}

[check.mchs]
;MChS settings
host = dq2cmd.inp.nsk.su
port = 5555
client_id = 10

[ws]
receive_time = 10
device_backend = ${device:protocol}://${device:host}:${device:port}
monitor = ${monitor:protocol}://${monitor:host}:${monitor:port}
system_check = ${check:protocol}://${check:host}:${check:port}
host = 0.0.0.0
port = 8000

[ws]
receive_time = 10
; To open the frontend use dq11cmd.inp.nsk.su/7777
host = 0.0.0.0
port = 8000

loglevel = info
; Path inside the docker container to the log file
; At the machine it is ${repo}/store/ws.log
logfile = /store/ws.log
subscribers =
